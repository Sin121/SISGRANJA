package Hibernate;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
// Generated 27/08/2014 21:15:49 by Hibernate Tools 3.6.0



/**
 * Galpao generated by hbm2java
 */
public class Galpao  implements java.io.Serializable {


     private Integer codigo;
     private String nome;
     private int tipo;
     private double altura;
     private double largura;
     private double comprimento;

    public Galpao() {
    }

    public Galpao(String nome, int tipo, double altura, double largura, double comprimento) {
       this.nome = nome;
       this.tipo = tipo;
       this.altura = altura;
       this.largura = largura;
       this.comprimento = comprimento;
    }
   
    public Integer getCodigo() {
        return this.codigo;
    }
    
    public void setCodigo(Integer codigo) {
        this.codigo = codigo;
    }
    public String getNome() {
        return this.nome;
    }
    
    public void setNome(String nome) {
        this.nome = nome;
    }
    public int getTipo() {
        return this.tipo;
    }
    
    public void setTipo(int tipo) {
        this.tipo = tipo;
    }
    public double getAltura() {
        return this.altura;
    }
    
    public void setAltura(double altura) {
        this.altura = altura;
    }
    public double getLargura() {
        return this.largura;
    }
    
    public void setLargura(double largura) {
        this.largura = largura;
    }
    public double getComprimento() {
        return this.comprimento;
    }
    
    public void setComprimento(double comprimento) {
        this.comprimento = comprimento;
    }
    //FUNÇÃO PARA ARMAZENAR OS DADOS
    public void armazenar(Galpao gp){
        Session sessao = HibernateUtil.getSessionFactory().openSession();
        
        try{
            sessao.beginTransaction();//abre-se uma transação
            sessao.save(gp);//acumula a operação de gravação do objeto no BD, na transação
            sessao.getTransaction().commit();
            JOptionPane.showMessageDialog(null,"Dados armazenados");
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null,ex);
        }
    }
    //FUNÇÃO PARA LISTAR DADOS
public List listaGP(){
    Session sessao = HibernateUtil.getSessionFactory().openSession();
    try{
        sessao.beginTransaction();
        List lista =  sessao.createQuery("from Galpao").list();
        sessao.close();
        return lista;
    }catch(HibernateException ex){
        System.out.println(ex);
        return null;
    }         
  }
//FUNÇÃO PARA EXIBIR OS DADOS NA TABELA.
public void tabela(javax.swing.JTable teste){
    Galpao gp = new Galpao();
    List lista = gp.listaGP();
       
       DefaultTableModel model = (DefaultTableModel) teste.getModel();
       model.setNumRows(0);
       for(Iterator it = lista.iterator();it.hasNext();){
           Galpao galpao = (Galpao) it.next();
           model.addRow(
                   new Object[]{
                       galpao.getCodigo(),
                       galpao.getNome(),
                       galpao.getTipo(),
                       galpao.getAltura(),
                       galpao.getLargura(),
                       galpao.getComprimento()
                   }
           
           );
       }
       teste.setAutoCreateRowSorter(true);//auto-ordenar
       teste.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);//selecionar so 1 entrada
}
public void alterar(Galpao gp){
        //ATUALIZANDO O CLIENTE NO BD
        Session sessao = HibernateUtil.getSessionFactory().openSession();
        
        try{
            sessao.beginTransaction();//abre-se uma transação
            sessao.merge(gp); //acumula a operação de alteração do objeto cliente no BD, na transação
            sessao.getTransaction().commit(); //realiza definitivamente todas as operações pendentes na transação
            JOptionPane.showMessageDialog(null, "Galpão Alterado com Sucesso");
            
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null,ex);
        }
    }
//função que exclui um objeto no banco a partir de uma busca com o código
    public void excluir(int item){
        Session sessao = HibernateUtil.getSessionFactory().openSession();
    try{
        
    sessao.beginTransaction();
    
    Query lista = sessao.createQuery("from Galpao where codigo='"+item+"'");
    Galpao gp = (Galpao) lista.uniqueResult();
    sessao.delete(gp);//método para deletar os dados no banco
    sessao.getTransaction().commit();
    JOptionPane.showMessageDialog(null, "Galpão Excluído com Sucesso");
    }catch(HibernateException ex){
        JOptionPane.showMessageDialog(null,"Erro aki "+ex);
    }
        
}
}


